lc_ie
monCon <- getMonotonisationConstants(fun = getQ, lower = 0.001, upper = 0.5, argument = "firstStagePValue", dist = "maxlr", ncp0 = 0.5)
monOpt <- getOptimalConditionalError(firstStagePValue = p, dist = "maxlr", constant = lc_ie$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 0.5)
devtools::load_all()
monOpt <- getOptimalConditionalError(firstStagePValue = p, dist = "maxlr", constant = lc_ie$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 0.5)
devtools::load_all()
monOpt <- getOptimalConditionalError(firstStagePValue = p, dist = "maxlr", constant = lc_ie$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 0.5)
devtools::load_all()
monOpt <- getOptimalConditionalError(firstStagePValue = p, dist = "maxlr", constant = lc_ie$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 0.5)
plot(p, monOpt, type = "l")
plot(p, monOpt, type = "l", ylim =c(0, 0.8))
lc <- getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, ncp0 = 0.5, conditionalPower = 0.9, dist = "maxlr")
opt <- getOptimalConditionalError(firstStagePValue = p, "maxlr", constant = lc$root, conditionalPower = 0.9, ncp0 = 0.5)
lines(p, opt, lty = 2)
lc_ie <- getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, ncp0 = 1.3, conditionalPower = 0.9, dist = "maxlr")
monCon <- getMonotonisationConstants(fun = getQ, lower = 0.001, upper = 0.5, argument = "firstStagePValue", dist = "maxlr", ncp0 = 1.3)
lc_ie <- getLevelConstantMonotone(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, ncp0 = 1.3, conditionalPower = 0.9, dist = "maxlr")
plot(p, getOptimalConditionalError(firstStagePValue = p, dist = "maxlr", constant = lc_ie$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 1.3), type = "l")
plot(p, getOptimalConditionalError(firstStagePValue = p, dist = "maxlr", constant = lc_ie$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 1.3), type = "l", ylim = c(0, 0.8))
lc <- getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, ncp0 = 1.3, dist = "maxlr")
lines(p, getOptimalConditionalError(p, dist = "maxlr", constant = lc$root, conditionalPower = 0.9, ncp0 = 1.3), lty = 2)
lc$root
lc_ie$root
-exp(lc$root)
-exp(lc_ie$root)
devtools::load_all()
devtools::load_all()
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, ncp1 = 1, conditionalPower = 0.9, dist = "maxlr")
devtools::load_all()
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, ncp1 = 1, conditionalPower = 0.9, dist = "maxlr")
monCon <- getMonotonisationConstants(fun = getQ, lower = 0.001, upper = 0.5, argument = "firstStagePValue", dist = "maxlr", ncp0 = 0.8)
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", ncp0 = 0.8)
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", ncp0 = 0.8, monotonisationConstants = monCon)
lc <- getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", ncp0 = 0.8, monotonisationConstants = monCon)
plot(p, getOptimalConditionalError(p, dist = "maxlr", constant = lc$root, conditionalPower = 0.9, monotonisationConstants = monCon, ncp0 = 0.8), type = "l")
integrate(f = getOptimalConditionalError, lower = 0.001, upper = 0.5, constant = lc$root, conditionalPower = 0.9, dist = "maxlr", monotonisationConstants = monCon, ncp0 = 0.8)
lc_f <- getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", ncp0 = 0.8)
integrate(f = getOptimalConditionalError, lower = 0.001, upper = 0.5, constant = lc_f$root, conditionalPower = 0.9, dist = "maxlr", monotonisationConstants = monCon, ncp0 = 0.8)
devtools::load_all()
lc$root
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", constant = lc$root, allocationRatio = 1, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = 1.768)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", constant = lc$root, allocationRatio = 1, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = 1.768, ncp0 = 0.8)
devtools::load_all()
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", constant = lc$root, allocationRatio = 1, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = 1.768, ncp0 = 0.8)
ncp0 <- 1.768
monCon <- getMonotonisationConstants(fun = getQ, lower = 0.001, upper = 0.5, argument = "firstStagePValue", ncp0 = ncp0, dist = "maxlr")
monCon
lc_ie <- getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", monotonisationConstants = monCon, ncp0 = ncp0)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp0)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.9, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp0, ncp0 = ncp0)
alpha1 <- 0.0154
alpha0 <- 0.5
alpha <- 0.025
cp <- 0.9
ncp1 <- 1,768
ncp1 <- 1.768
monCon <- getMonotonisationConstants(fun = getQ, lower = alpha1, upper = alpha0, argument = "firstStagePValue", dist = "maxlr", ncp0 = ncp1)
lc_ie <- getLevelConstant(alpha = alpha, alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", monotonisationConstants = monCon, ncp0 = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1, ncp0 = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = 0, ncp0 = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1/2, ncp0 = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "normal", ncpDelta = ncp1, tauDelta = 0.15*sqrt(50), ncp0 = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "exp", kap0 = 1/(0.25*sqrt(50)), ncp0 = ncp1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "exp", kap0Delta = 1/(0.25*sqrt(50)), ncp0 = ncp1)
monCon1 <- getMonotonisationConstants(fun = getQ, lower = alpha1, upper = alpha0, argument = "firstStagePValue", dist = "maxlr", ncp0 = 1)
lc_ie1 <- getLevelConstant(alpha = alpha, alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", monotonisationConstants = monCon1, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1/2, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "fixed", ncpDelta = 0, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon, delta1 = 0.25, distDelta = "normal", ncpDelta = ncp1, tauDelta = 0.15*sqrt(50), ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon1, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1/2, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon1, delta1 = 0.25, distDelta = "fixed", ncpDelta = ncp1, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = alpha0, alpha1 = alpha1, conditionalPower = cp, dist = "maxlr", constant = lc_ie1$root, monotonisationConstants = monCon1, delta1 = 0.25, distDelta = "fixed", ncpDelta = 0, ncp0 = 1)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
length(NULL)
getLikelihoodRatio(firstStagePValue = 0, dist = "maxlr")
getLikelihoodRatio(firstStagePValue = 1, dist = "maxlr")
getLikelihoodRatio(firstStagePValue = 0, dist = "fixed", ncpLR = 2)
getLikelihoodRatio(firstStagePValue = 0, dist = "normal", ncpLR = 2, tauLR = 1)
getLikelihoodRatio(firstStagePValue = 0, dist = "normal", ncpLR = 2, tau = 1)
devtools::load_all()
getMonotonisationConstants(fun = getQ, dist = "maxlr", argument = "firstStagePValue", ncp0 = 1.5)
getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0001, conditionalPower = 0.8, dist = "maxlr", ncp1 = 1)
monCon <- getMonotonisationConstants(fun = getQ, argument = "firstStagePValue", ncp0 = 1)
monCon <- getMonotonisationConstants(fun = getQ, argument = "firstStagePValue", ncp0 = 1, dist = "maxlr")
getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0001, conditionalPower = 0.8, dist = "maxlr", monotonisationConstants = monCon, ncp0 = 1)
delta1 <- 0.25
ncp <- 1
lc <- getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, ncp1 = 1)
lc$root
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1, ncp = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0.5, ncp1 = 1)
lc <- getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0001, conditionalPower = 0.8, dist = "maxlr", ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.0001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.0001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1)
a0 <- 0.5
a1 <- 0.0001
a <- 0.025
c <- 0.8
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, cp = c, dist = "fixed", ncpLR = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", ncpLR = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", ncpLR = 1, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLR = 1, ncpDelta = 0)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLR = 1, ncpLRDelta = 0)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLR = 1, ncpLRDelta = 0.5)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLR = 1, ncpLRDelta = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLRDelta = 0)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLRDelta = 0.5)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncp1 = 1, ncpLRDelta = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "normal", ncpLR = 1, tauLR = 1, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "normal", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLR = 1, tauLR = 1, ncpLRDelta = 0)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "normal", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLR = 1, tauLR = 1, ncpLRDelta = 0, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "normal", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLR = 1, tauLR = 1, ncpLRDelta = 0.5, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "normal", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLR = 1, tauLR = 1, ncpLRDelta = 1, ncp1 = 1)
mc <- getMonotonisationConstants(fun = getQ, lower = a1, upper = a0, argument = "firstStagePValue", dist = "maxlr", ncp0 = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", monotonisationConstants = mc, ncp0 = 1)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", constant = lc$root, monotonisationConstants = mc, delta1 = 0.25, distDelta = "fixed", ncp0 = 1, ncpLRDelta = 0)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", constant = lc$root, monotonisationConstants = mc, delta1 = 0.25, distDelta = "fixed", ncp0 = 1, ncpLRDelta = 0.5)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", constant = lc$root, monotonisationConstants = mc, delta1 = 0.25, distDelta = "fixed", ncp0 = 1, ncpLRDelta = 1)
mc <- getMonotonisationConstants(fun = getQ, lower = a1, upper = a0, argument = "firstStagePValue", dist = "maxlr", ncp0 = 2)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", ncp0 = 2)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c,dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c,dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0, ncp0 = 2)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c,dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0.5, ncp0 = 2)
getExpectedSecondStageSampleSize(alpha0 = a0, alpha1 = a1, conditionalPower = c,dist = "maxlr", constant = lc$root, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1, ncp0 = 2)
a2
a2 <- getAlpha2InverseNormal(alpha = 0.025, alpha1 = 0.0001, alpha0 = 0.5)
getExpIN <- function(alpha0, alpha1, alpha2, alpha, conditionalPower, allocationRatio = 1, delta1, distDelta, ...) {
return(stats::integrate(f = intExpIN, lower = alpha1, upper = alpha0, conditionalPower = conditionalPower, delta1 = delta1,
alpha0 = alpha0, alpha1 = alpha1, alpha2 = alpha2, alpha = alpha, distDelta = distDelta, ... = ...)$value
* (allocationRatio + 1))
}
intExpIN <- function(p1, alpha, alpha1, alpha0, alpha2, distDelta, delta1, conditionalPower, ...) {
inErr <- getInverseNormalConditionalError(
alpha = alpha, alpha0 = alpha0, firstStagePValue = p1, alpha1 = alpha1,
alpha2 = alpha2)
likelihoodRatio <- NA
args <- list(...)
if(distDelta == "fixed") {
ncpLR <- unlist(args["ncpLRDelta"])
weights <- unlist(args["weightsDelta"])
if(is.null(ncpLR)) {
stop("Argument ncpLRDelta must be provided for fixed likelihood ratio case.")
}
likelihoodRatio <- getLikelihoodRatio(
firstStagePValue = p1, dist = "fixed", ncpLR = ncpLR, weights = weights
)
}
else if(distDelta == "normal") {
ncpLR <- unlist(args["ncpLRDelta"])
tau <- unlist(args["tauLRDelta"])
if(is.null(ncpLR) || is.null(tau)) {
stop("Arguments ncpLRDelta and tauLRDelta must be provided for fixed likelihood ratio case.")
}
likelihoodRatio <- getLikelihoodRatio(
firstStagePValue = p1, dist = "normal", ncpLR = ncpLR, tau = tau
)
}
else if(distDelta == "exp") {
kap0 <- unlist(args["kap0Delta"])
# Ensure that argument was specified
if(is.null(kap0)) {
stop("Argument kap0Delta must be specified for exponential likelihood case.")
}
likelihoodRatio <- getLikelihoodRatio(
firstStagePValue = p1, dist = "exp", kap0 = kap0
)
}
else if(distDelta == "unif") {
delMax <- unlist(args["delMaxDelta"])
# Ensure that argument was specified
if(is.null(delMax)) {
stop("Argument delMaxDelta must be specified for uniform likelihood case.")
}
likelihoodRatio <- getLikelihoodRatio(
firstStagePValue = p1, dist = "unif", delMax = delMax
)
}
else if(distDelta == "maxlr") {
likelihoodRatio <- getLikelihoodRatio(
firstStagePValue = p1, dist = "maxlr"
)
}
else {
stop("Distribution not matched.")
}
return((getNu(alpha=inErr,  conditionalPower = conditionalPower)*likelihoodRatio) / (delta1^2))
}
getExpIN(alpha0 = a0, alpha1 = a1, alpha2 = a2, alpha = a, conditionalPower = c, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1)
getExpIN(alpha0 = a0, alpha1 = a1, alpha2 = a2, alpha = a, conditionalPower = c, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0)
getExpIN(alpha0 = a0, alpha1 = a1, alpha2 = a2, alpha = a, conditionalPower = c, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 0.5)
1-pnorm(2.16)
getInverseNormalConditionalError(alpha = 0.025, alpha0 = 0.5-1e-8, alpha1 = 0.0154, firstStagePValue = 0.5, alpha2 = )
getInverseNormalConditionalError(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0154, firstStagePValue = 0.5-1e-9 )
getInverseNormalConditionalError(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0154, firstStagePValue = 0.5 )
devtools::load_all()
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", ncpLR = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "fixed", ncpLR = 1, ncp1 = 1)
getOptimalConditionalError(0.5, dist = "fixed", constant = lc$root, conditionalPower = c, ncpLR = 1, ncp1 = 1)
getSecondStageSampleSize(0.01792382, conditionalPower = 0.9, delta1 = 0.25)
a1
c
getSecondStageSampleSize(0.01792382, conditionalPower = 0.8, delta1 = 0.25)
a
a0
a1
c
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", ncp1 = 1)
getOptimalConditionalError(firstStagePValue = 0.5, dist = "maxlr", constant = lc$root, conditionalPower = c, ncp1 = 1)
getSecondStageSampleSize( 0.02111387, c, 0.25)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "normal", ncpLR = 1, tauLR = 1, ncp1 = 1)
getOptimalConditionalError(0.5, dist = "normal", constant = lc$root, conditionalPower = c, ncpLR = 1, tauLR = 1, ncp1 = 1)
getSecondStageSampleSize( 0.0195042, c, 0.25)
mc <- getMonotonisationConstants(fun = getQ, lower = a1, upper = a0, argument = "firstStagePValue", dist = "maxlr")
mc <- getMonotonisationConstants(fun = getQ, lower = a1, upper = a0, argument = "firstStagePValue", dist = "maxlr", ncp0 = 1)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", monotonisationConstants = mc, ncp0 = 1)
getOptimalConditionalError(0.5, dist = "maxlr", constant = lc$root, conditionalPower = c, monotonisationConstants = mc, ncp0 = 1)
getSecondStageSampleSize(0.03639864, c, 0.25)
lc <- getLevelConstant(alpha = a, alpha0 = a0, alpha1 = a1, conditionalPower = c, dist = "maxlr", ncp0 = 2)
getOptimalConditionalError(0.5, dist = "maxlr", constant = lc$root, conditionalPower = c, ncp0 = 2)
getSecondStageSampleSize( 0.02274814, c, 0.25)
getInverseNormalConditionalError(alpha = a, alpha0 = a0, alpha1 = a1, firstStagePValue = 0.5)
getSecondStageSampleSize(0.002851358, c, 0.25)
devtools::document()
devtools::check()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
50*35
1750/60
getNonCentralityParameter(delta = 0.25, firstStageSampleSize = 128)
install.packages("tipmap")
usethis::use_vignette("introduction")
usethis::use_r("getMeanDifference")
rnorm("A")
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
devtools::load_all()
lc <- getLevelConstant(alpha = 0.025 ,alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1)
lc <- getLevelConstant(alpha = 0.025 ,alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.1)
devtools::load_all()
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.1, ncpLR = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta1 = 1, ncpLR = 1)
devtools::load_all()
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.1, ncpLR = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1)
devtools::load_all()
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1)
devtools::load_all()
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1, firstStageSampleSize = 100)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1, firstStageSampleSize = 200)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1, firstStageSampleSize = 37000)
devtools::load_all()
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1, firstStageSampleSize = 37000)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1, firstStageSampleSize = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1, ncp1 = 1, delta0 = 0.5, ncpLR = 1, firstStageSampleSize = 100)
lc <- getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.0154, conditionalPower = 0.9, dist = "fixed", ncpLR = 1.768, ncp1 = 1.768)
lc
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.0154, conditionalPower = 0.9, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1.768, ncp1 = 1.768, delta0 = 0.25, firstStageSampleSize = 32)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.0154, conditionalPower = 0.9, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1.768, ncp1 = 1.768, delta0 = 0.25, firstStageSampleSize = 32, ncpLR = 1.768)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.0154, conditionalPower = 0.9, dist = "fixed", constant = lc$root, distDelta = "fixed", ncpLRDelta = 1.768, ncp1 = 1.768, delta0 = 0.25, firstStageSampleSize = 100, ncpLR = 1.768)
usethis::use_r("getInverseNormalCombinationFunction")
devtools::document()
roxygen2::roxygenise()
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
?person
devtools::check()
devtools::check()
devtools::check()
getOptimalConditionalError(dist = "fixed", ncpLR = 1, firstStagePValue = 0.5, ncp1 = NA, constant = NA, conditionalPower = NA)
getOptimalConditionalError(dist = "fixed", ncpLR = 1, firstStagePValue = 0.5, ncp1 = 1, constant = 3, conditionalPower = 0.8)
devtools::check()
?getQ
?getLevelConstant
getLevelConstant(
alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8,
ncp1 = 1, dist = "fixed", ncpLR = 1)
?getOptimalConditionalError
getLevelConstant(
alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8,
ncp1 = 1, dist = "fixed", ncpLR = 1)$root
?getMonotonisationConstants
lc <- getLevelConstant(
alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8,
dist = "maxlr", ncp0 = 0.5)
getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed", ncpLR = 1, ncp1 = 1)
getExpectedSecondStageSampleSize(
alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed",
ncpLR = 1, ncp1 = 1, constant = 4.41324, distDelta = "fixed", ncpLRDelta = 1
)
getExpectedSecondStageSampleSize(
alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed",
ncpLR = 1, ncp1 = 1, constant = 4.41324, distDelta = "fixed", ncpLRDelta = 1, delta1 = 0.25
)
getExpectedSecondStageSampleSize(
alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed",
ncpLR = 0, ncp1 = 1, constant = 4.41324, distDelta = "fixed", ncpLRDelta = 1, delta1 = 0.25
)
lc <- getLevelConstant(alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "maxlr", ncp0 = 0.5)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "maxlr", constant = lc$root, distDelta = "fixed", ncp0 = 0.5, ncpLRDelta = 1)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "maxlr", constant = lc$root, distDelta = "fixed", ncp0 = 0.5, ncpLRDelta = 1, delta1 = 0.25)
mc <- getMonotonisationConstants(fun = getQ, lower = 0.001, upper = 0.5, argument = "firstStagePValue", ncp0 = 0.5, conditionalPower = 0.8, dist = "maxlr")
lc_m <- getLevelConstant(alpha = 0.025, alpha0 = 0.5 ,alpha1 = 0.001, conditionalPower = 0.8, dist = "maxlr", ncp0 = 0.5, monotonisationConstants = mc)
getExpectedSecondStageSampleSize(alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "maxlr", constant = lc_m$root, monotonisationConstants = mc, delta1 = 0.25, distDelta = "fixed", ncpLRDelta = 1, ncp0 = 0.5)
levelConstantMonotone
getLevelConstant(
alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8,
dist = "maxlr", monotonisationConstants = monoConstants, ncp0 = 0.5
)$root
getExpectedSecondStageSampleSize(
alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8, dist = "fixed",
ncpLR = 1, ncp1 = 1, constant = 4.41324, distDelta = "fixed", ncpLRDelta = 0, delta1 = 0.25
)
exp(-0.5)
c(0.25, 0.25, 0.5) %*% exp(-c(0, 0.125, 0.5))
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::check()
devtools::install()
devtools::load_all()
1-pnorm(2)
0 < 1-pnorm(2) || 0 > pnorm(2)
0 < 1-pnorm(2) | 0 > pnorm(2)
devtools::load_all()
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0)
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.99)
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.99, dist = "maxlr")
getLevelConstant(alpha = 0.05, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.99, dist = "maxlr", ncp1 = 1)
getOptimalConditionalError(firstStagePValue = seq(0.1, 0.2, 0.001), dist = "maxlr", constant = 4.1, conditionalPower = 0.99, ncp1 = 1)
warnings()
devtools::load_all()
getOptimalConditionalError(firstStagePValue = seq(0.1, 0.2, 0.001), dist = "maxlr", constant = 4.1, conditionalPower = 0.99, ncp1 = 1)
warnings()
getOptimalConditionalError(firstStagePValue = 0.1, dist = "maxlr", constant = 4.1, conditionalPower = 0.99, ncp1 = 1)
warnings()
?getNonCentralityParameter
?getLevelConstant
ncp <- getNonCentralityParameter(0.25, 100)
constant <- getLevelConstant(0.025, 0.5, 0.0154, 0.9, "fixed", ncpLR=ncp, ncp1=ncp)$root
getExpectedSecondStageSampleSize(alpha0=0.5, alpha1=0.0154, conditionalPower=0.9, dist="fixed", constant=constant, ncpLR=ncp, distDelta="fixed", ncpLRDelta=ncp)
getExpectedSecondStageSampleSize(alpha0=0.5, alpha1=0.0154, conditionalPower=0.9, dist="fixed", constant=constant, ncpLR=ncp, distDelta="fixed", ncpLRDelta=ncp, ncp1=ncp)
getExpectedSecondStageSampleSize(alpha0=0.5, alpha1=0.0154, conditionalPower=0.9, dist="fixed", constant=constant, ncpLR=ncp, distDelta="fixed", ncpLRDelta=ncp, ncp1=ncp, delta1=0.25)
?getExpectedSecondStageSampleSize
devtools::document()
?getExpectedSecondStageSampleSize
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
devtools::document()
devtools::document()
pkgload::dev_help('getExpectedSecondStageSampleSize')
getMonotoneFunction(x=seq(0.001,0.5,0.001), lower=0.001, upper=0.5, fun=getQ, argument="firstStagePValue", dist="maxlr", ncp0=0.5,)
getMonotonisationConstants(fun=getQ, lower=0.001, upper=0.5, argument="firstStagePValue", dist="maxlr", ncp0=0.5)
getNu(alpha=0.8, conditionalPower=0.7)
getPsi(getNuPrime(alpha=0.05, conditionalPower=0.9), conditionalPower=0.9)
devtools::check()
devtools::document()
devtools::install()
devtools::document()
devtools:.checkMFClasses()
devtools::check()
devtools::install()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
?findAlpha2
devtools::install()
?uniroot
devtools::document()
devtools::check()
devtools::install()
?devtools::build
devtools::build()
devtools::check()
devtools::install()
devtools::load_all()
usethis::use_r("getDesignOptimalConditionalErrorFunction")
usethis::use_r("integrateWithConstants")
usethis::use_r("getIntegralWithConstants")
devtools::load_all()
usethis::use_r("getInnerPsiConstant")
devtools::load_all()
design0 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp0 = 1, dist = "maxlr")
design0
devtools::load_all()
design0 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp0 = 1, dist = "maxlr")
p <- seq(0.001, 0.5, 0.001)
opti <- getOptimalConditionalError(p, design0)
plot(p, opti, type = "l")
design1 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "maxlr")
design1
devtools::load_all()
design1 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "maxlr")
devtools::load_all()
design1 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "maxlr")
devtools::load_all()
design1 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "maxlr")
opti_1 <- getOptimalConditionalError(p, design = design1)
plot(p, opti_1, type = "l")
devtools::load_all()
design0 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp0 = 1, dist = "maxlr")
opti_0 <- getOptimalConditionalError(p, design0)
plot(p, opti_0, type = "l")
devtools::load_all()
design0 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp0 = 1, dist = "maxlr")
plot(p, opti_0, type = "l")
opti_0 <- getOptimalConditionalError(p, design0)
plot(p, opti_0, type = "l")
design0 <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp0 = 1, dist = "maxlr", maximumConditionalError = 0.4)
opti_0 <- getOptimalConditionalError(p, design0)
plot(p, opti_0, type = "l")
devtools::build()
devtools::install()
devtools::load_all()
design <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "maxlr")
design
getLevelConstant(
alpha = 0.025, alpha0 = 0.5, alpha1 = 0.001, conditionalPower = 0.8,
ncp1 = 1, dist = "fixed", ncpLR = 1)
design
devtools::load_all()
devtools::install()
library(optconerrf)
devtools::load_all()
design <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.0154, alpha0 = 0.5, conditionalPower = 0.9, dist = "maxlr", ncp1 = 1)
design
distDelta <- "abc"
list(distDelta)
devtools::load_all()
design
getExpectedSecondStageSampleSize(design, distDelta = "fixed", ncpLRDelta = 1)
devtools::load_all()
getExpectedSecondStageSampleSize(design, distDelta = "fixed", ncpLRDelta = 1)
getExpectedSecondStageSampleSize(design, distDelta = "maxlr")
devtools::install()
devtools::install()
devtools::load_all()
design <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "fixed", ncpLR = 1)
getExpectedSecondStageSampleSize(design, distDelta = "fixed", ncpLRDelta = 1, delta1 = 0.25)
devtools::install()
?getLevelConstant
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(optconerrf)
design <- getDesignOptimalConditionalErrorFunction(alpha = 0.025, alpha1 = 0.001, alpha0 = 0.5, conditionalPower = 0.9, ncp1 = 1, dist = "maxlr")
design
library(optconerrf)
design <- getDesignOptimalConditionalErrorFunction(0.025, 0.001, 0.5, 0.9, 1, dist = "maxlr")
getOptimalConditionalError(0.01, design = design)
p1 <- seq(0, 1, 0.001)
plot(p1, getOptimalConditionalError(p1, design), type = "l")
design <- getDesignOptimalConditionalErrorFunction(0.025, 0.01, 0.5, 0.9, 1, dist = "maxlr")
plot(p1, getOptimalConditionalError(p1, design), type = "l")
getExpectedSecondStageSampleSize(design = design, distDelta = "maxlr")
getExpectedSecondStageSampleSize(design = design, distDelta = "fixed", ncpLRDelta=1, delta1=0.25)
design
